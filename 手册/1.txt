1.App
为虚基类，所有方法均为static，
核心引导数组不错，$core_class_array，可以用于存储路径啥的
auto_load：根据名称尝试自动引入，非常好，类的最后由spl_autoload_register引入
get_mobile：判断是否为手机端
singleton：根据类名，实例化对应的content、form、member的model
load_file：引入文件

url,lang等函数，不是APP的方法，url不用考虑第1个判断，那是高级版的事。第2个主要加入siteid，最后还是引用Controller::create_url来解析

2.Fn_base
虚基类，全是魔术方法，__set，__get，__call，__toString

3.Controller
也是虚基类，均为静态方法，继承自Fn_base，作用多为静态方法使用，只有installcontroller继承了它
check_Get：记录$_GET中的非法字符，非法字符在config/attackcode.ini.php中，设计得比较好的地方是，用了2个静态变量记录非法字符和以判断的字符，调用substr_count来看非法字符在get中出现的次数
save_attack_log：记录非法字符日志，保存到cache/attrack中，超过10次报错
get/post：检查get中的字符并转义（如果是get，值为数组直接返回null，post好像值可以是数组）
isPostForm：验证表单是否POST提交，根据post中是否有submit值来判断
halt：用于显示错误信息. 若调试模式关闭时(即:SYS_DEBUG为false时)，则将错误信息并写入日志
get_server_name：获取当前运行程序的网址域名
get_base_url：获取当前项目的根目录的URL
redirect：非常有用的一个地方是，用headers_sent判断是否已经发送了header了，如果是就用js跳转
create_url：用于组装带query的url，有get_base_url+ENTRY_SCRIPT_NAME(index.php)+（s=admin）+c+a+query组成
load_config：加载静态config文件（都带ini.php后缀）


4.View
__construct：获取&get_instance()，设置风格
create_compile_file：生成视图编译文件
display：显示视图文件，最后调用ci->profiler->run执行


5.Common
继承自CI_Controller，为控制器方法基类
construct方法：
1）判断是否已安装
2）引入function.php公用函数库（在这里引入挺好的，反正控制器是入口）
3）引入version缓存
4）引入并实例化cache_file类，用于生成缓存
5）设置APP和自身的c、a等
6）调用自身_init初始化，主要有：（1）引入config、mobile、site等缓存文件，（2）获取主机名，主要用于获取siteid和对应的缓存文件（site目录下），从而将其合并到配置中，（3）判断是否为移动端登陆，（4）获取或设置时间格式、时区、风格、语言项，判断是否为ajax等，（5）初始化数据库
7）获取栏目缓存
8）设置内容表id
9）定义网站常量
10）根据ip判断是否禁止访问
11）获取视图文件
12）获取会员相关缓存（貌似没有）
13）设置视图选项
14）判断机器人，百度ping

is_ie：
getMember：获取会员信息
adminMsg：后台提示信息
memberMsg：会员提示信息
msg：前台提示信息
get_menu：后台操作界面中的顶部导航菜单
getFields：？？？？
postEvent：执行发布文件后触发的函数
checkFields：？？？


6.Log
写和读


7.Model









报告
App::display_error
App::display_404_error
